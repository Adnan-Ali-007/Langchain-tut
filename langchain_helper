# from langchain_community.llms import Cohere
# from dotenv import load_dotenv
# from langchain.prompts import PromptTemplate
# from langchain.chains import LLMChain
# from langchain.agents import initialize_agent
# from langchain.agents import AgentType
# from langchain_community.agent_toolkits.load_tools import load_tools
# import os
# load_dotenv()
# def generate_pet_name(animal_type, pet_color):
#     api_key = os.getenv("COHERE_API_KEY")
#     if not api_key:
#         raise ValueError("COHERE_API_KEY is not set in .env file")
#     llm = Cohere(cohere_api_key=api_key)
#     prompt_template_name = PromptTemplate(
#         input_variables=['animal_type', 'pet_color'],
#         template="I have a {animal_type} pet and I want a cool name for it, it is {pet_color} in color. Suggest me five cool names for my pet."
#     )
#     name_chain = LLMChain(llm=llm, prompt=prompt_template_name, output_key="pet_name")
#     response = name_chain({'animal_type': animal_type, 'pet_color': pet_color})
#     return response
# def langchain_agent():
#     api_key = os.getenv("COHERE_API_KEY")
#     if not api_key:
#         raise ValueError("COHERE_API_KEY is not set in .env file")
#     llm = Cohere(cohere_api_key=api_key)
#     tools = load_tools(["wikipedia", "llm-math"], llm=llm)
#     print("Loaded tools:", tools)
#     agent = initialize_agent(
#         tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True
#     )
#     result = agent.run("What is the avg age of a dog? Multiply the age by 3")
#     print("Result:", result)
# if __name__ == "__main__":
#     langchain_agent()
#YT VIDEO transcripter
from langchain_cohere import  CohereEmbeddings  # Correct import for Cohere
from langchain_community.document_loaders import YoutubeLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS  # Corrected FAISS import
import os
from dotenv import load_dotenv
load_dotenv()
# Initialize Cohere API key
api_key = os.getenv("COHERE_API_KEY")
print(api_key)  # Verify the API key is correct
# Initialize Cohere LLM and Embeddings
llm = Cohere(cohere_api_key=api_key)
embeddings = CohereEmbeddings(cohere_api_key=api_key)
# Define your function for creating vector DB from YouTube URL
def create_vector_db_from_youtube_url(video_url: str) -> FAISS:
    loader = YoutubeLoader.from_youtube_url(video_url)
    transcript = loader.load()
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
    docs = text_splitter.split_documents(transcript)
    # Use CohereEmbeddings for vector storage
    db = FAISS.from_documents(docs, embeddings)
    return db
# Example usage
video_url = "https://www.youtube.com/watch?v=BzMYQIo-0NA"
def fet_response_from_query(db,query,k):
    docs=db.similarity_search(query,k=k)
    docs_page_content=" ".join([d.page_content for d in docs])
    llm=Cohere(model=) 
